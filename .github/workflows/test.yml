name: Test Suite

on:
  push:
    branches:
      - master
    paths:
      - 'deploy/**'

jobs:
  set_up:
    runs-on: ubuntu-latest
    name: Basic Usage Test
    permissions:
      id-token: write
      contents: read
    outputs:
      staging: ${{ steps.filter.outputs.staging }}
      prod: ${{ steps.filter.outputs.prod }}
      matrix-prod: ${{ steps.set-matrix.outputs.matrix-prod }}
      matrix-staging: ${{ steps.set-matrix.outputs.matrix-staging }}
     # matrix-staging-clusters: ${{ steps.set-matrix.outputs.matrix-staging-clusters }}
     # matrix-prod-clusters: ${{ steps.set-matrix.outputs.matrix-prod-clusters }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0  
          
      - name: filter
        uses: dorny/paths-filter@v2
        id: filter
        with:
          list-files: json
          filters: |
            staging:
              - 'deploy/*staging/**'
            prod:
              - 'deploy/*prod/**'
      - name: List all changed files
        if: steps.filter.outputs.staging == 'true' || steps.filter.outputs.prod == 'true'
        run: |
         staging_applications=(${{ steps.filter.outputs.staging_files }})
         prod_applications=(${{ steps.filter.outputs.prod_files }})
         IFS=','
         filtered_staging_apps=()
         filtered_prod_apps=()
         
         # Get the staging application names first
         for staging_file in ${staging_applications[@]}; do
            filtered_staging_apps+=("$staging_file") 
         done
         echo "applications_staging=${filtered_staging_apps[@]}" >> $GITHUB_ENV
         
         for prod_file in ${prod_applications[@]}; do # Get prod application 
            filtered_prod_apps+=("$prod_file") 
         done
         echo "applications_prod=${filtered_prod_apps[@]}" >> $GITHUB_ENV
         
         
      - name: set-matrix 
        id: set-matrix
        if: steps.filter.outputs.staging == 'true' || steps.filter.outputs.prod == 'true'
        run: | 
         echo "::set-output name=matrix-staging::$(echo ${{ env.applications_staging }} | tr -d '\n' | jq -R -s -c 'split(" ")')"
         # echo "::set-output name=matrix-staging-clusters::$(echo ${{ env.clusters_staging }} | tr -d '\n' | jq -R -s -c 'split(" ")')"
         echo "::set-output name=matrix-prod::$(echo ${{ env.applications_prod }} | tr -d '\n' | jq -R -s -c 'split(" ")')"
         # echo "::set-output name=matrix-prod-clusters::$(echo ${{ env.clusters_prod }} | tr -d '\n' | jq -R -s -c 'split(" ")')"
         
         
           
  prod_dts: 
    needs: set_up
    if: ${{ needs.set_up.outputs.prod == 'true' }}
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1
      matrix: 
       app-value: ${{ fromJson(needs.set_up.outputs.matrix-prod) }}
    steps:
    - run: echo ${{ matrix.app-value }}

  staging_dts: 
    needs: set_up
    if: ${{ needs.set_up.outputs.staging == 'true' }}
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1
      matrix: 
       app-value: ${{ fromJson(needs.set_up.outputs.matrix-staging) }}
    steps:
    - run: echo ${{ matrix.app-value }}
